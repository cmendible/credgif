name: "credgif-build"

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release-*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.14
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      PROJECT_NAME: credgif
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
            filename: credgif_linux_amd64
          - os: windows-latest
            target_os: windows
            filename: credgif_windows_amd64.exe
          - os: macOS-latest
            target_os: darwin
            filename: credgif_darwin_amd64
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Create output folder
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}
      - name: Run build and archive non windows binaries
        if: matrix.target_os != 'windows'
        run: |
          GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} go build -ldflags "-s -w" -o ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}/${{ matrix.filename }} ./cmd/
      - name: Run build and archive windows binaries
        if: matrix.target_os == 'windows'
        run: |
          go build -ldflags "-s -w" -o ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}/${{ matrix.filename }} ./cmd/
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.PROJECT_NAME }}_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}/${{ matrix.target_os }}
  publish:
    name: Publish binaries
    needs: build
    if: github.event_name != 'pull_request'
    env:
      ARTIFACT_DIR: ./release
      PROJECT_NAME: credgif
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: download artifacts - ${{ env.PROJECT_NAME }}_linux_amd64
        uses: actions/download-artifact@master
        with:
          name: ${{ env.PROJECT_NAME }}_linux_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - ${{ env.PROJECT_NAME }}_windows_amd64
        uses: actions/download-artifact@master
        with:
          name: ${{ env.PROJECT_NAME }}_windows_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - ${{ env.PROJECT_NAME }}_darwin_amd64
        uses: actions/download-artifact@master
        with:
          name: ${{ env.PROJECT_NAME }}_darwin_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: publish binaries to github
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          echo "installing github-release-cli..."
          sudo npm install --silent --no-progress -g @babel/runtime
          sudo npm install --silent --no-progress -g github-release-cli

          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)

          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"

          REL_VERSION="0.1.0"
          RELEASE_BODY="This is the release candidate ${REL_VERSION}"

          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo "Uploading ${{ env.PROJECT_NAME }} Binaries to GitHub Release"
          github-release upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${REL_VERSION}" \
            --release-name "${{ env.PROJECT_NAME }} v${REL_VERSION}" \
            --body "${RELEASE_BODY}" \
            --prerelease true \
            ${RELEASE_ARTIFACT[*]}